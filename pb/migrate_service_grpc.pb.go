// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0--rc1
// source: migrate_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MigrateService_GetFileFormat_FullMethodName             = "/pb.MigrateService/GetFileFormat"
	MigrateService_CheckFileFormatAcceptable_FullMethodName = "/pb.MigrateService/CheckFileFormatAcceptable"
)

// MigrateServiceClient is the client API for MigrateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MigrateServiceClient interface {
	GetFileFormat(ctx context.Context, in *GetFileFormatRequest, opts ...grpc.CallOption) (*GetFileFormatResponse, error)
	CheckFileFormatAcceptable(ctx context.Context, in *CheckFileFormatAcceptableRequest, opts ...grpc.CallOption) (*CheckFileFormatAcceptableResponse, error)
}

type migrateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMigrateServiceClient(cc grpc.ClientConnInterface) MigrateServiceClient {
	return &migrateServiceClient{cc}
}

func (c *migrateServiceClient) GetFileFormat(ctx context.Context, in *GetFileFormatRequest, opts ...grpc.CallOption) (*GetFileFormatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileFormatResponse)
	err := c.cc.Invoke(ctx, MigrateService_GetFileFormat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrateServiceClient) CheckFileFormatAcceptable(ctx context.Context, in *CheckFileFormatAcceptableRequest, opts ...grpc.CallOption) (*CheckFileFormatAcceptableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckFileFormatAcceptableResponse)
	err := c.cc.Invoke(ctx, MigrateService_CheckFileFormatAcceptable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MigrateServiceServer is the server API for MigrateService service.
// All implementations must embed UnimplementedMigrateServiceServer
// for forward compatibility.
type MigrateServiceServer interface {
	GetFileFormat(context.Context, *GetFileFormatRequest) (*GetFileFormatResponse, error)
	CheckFileFormatAcceptable(context.Context, *CheckFileFormatAcceptableRequest) (*CheckFileFormatAcceptableResponse, error)
	mustEmbedUnimplementedMigrateServiceServer()
}

// UnimplementedMigrateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMigrateServiceServer struct{}

func (UnimplementedMigrateServiceServer) GetFileFormat(context.Context, *GetFileFormatRequest) (*GetFileFormatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileFormat not implemented")
}
func (UnimplementedMigrateServiceServer) CheckFileFormatAcceptable(context.Context, *CheckFileFormatAcceptableRequest) (*CheckFileFormatAcceptableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFileFormatAcceptable not implemented")
}
func (UnimplementedMigrateServiceServer) mustEmbedUnimplementedMigrateServiceServer() {}
func (UnimplementedMigrateServiceServer) testEmbeddedByValue()                        {}

// UnsafeMigrateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MigrateServiceServer will
// result in compilation errors.
type UnsafeMigrateServiceServer interface {
	mustEmbedUnimplementedMigrateServiceServer()
}

func RegisterMigrateServiceServer(s grpc.ServiceRegistrar, srv MigrateServiceServer) {
	// If the following call pancis, it indicates UnimplementedMigrateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MigrateService_ServiceDesc, srv)
}

func _MigrateService_GetFileFormat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileFormatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrateServiceServer).GetFileFormat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrateService_GetFileFormat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrateServiceServer).GetFileFormat(ctx, req.(*GetFileFormatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrateService_CheckFileFormatAcceptable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFileFormatAcceptableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrateServiceServer).CheckFileFormatAcceptable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrateService_CheckFileFormatAcceptable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrateServiceServer).CheckFileFormatAcceptable(ctx, req.(*CheckFileFormatAcceptableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MigrateService_ServiceDesc is the grpc.ServiceDesc for MigrateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MigrateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MigrateService",
	HandlerType: (*MigrateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFileFormat",
			Handler:    _MigrateService_GetFileFormat_Handler,
		},
		{
			MethodName: "CheckFileFormatAcceptable",
			Handler:    _MigrateService_CheckFileFormatAcceptable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "migrate_service.proto",
}
