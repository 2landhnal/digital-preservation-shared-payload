// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.0--rc1
// source: is_file_acceptable.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CheckFileFormatAcceptableRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Extension     string                 `protobuf:"bytes,1,opt,name=extension,proto3" json:"extension,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckFileFormatAcceptableRequest) Reset() {
	*x = CheckFileFormatAcceptableRequest{}
	mi := &file_is_file_acceptable_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckFileFormatAcceptableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckFileFormatAcceptableRequest) ProtoMessage() {}

func (x *CheckFileFormatAcceptableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_is_file_acceptable_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckFileFormatAcceptableRequest.ProtoReflect.Descriptor instead.
func (*CheckFileFormatAcceptableRequest) Descriptor() ([]byte, []int) {
	return file_is_file_acceptable_proto_rawDescGZIP(), []int{0}
}

func (x *CheckFileFormatAcceptableRequest) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *CheckFileFormatAcceptableRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type CheckFileFormatAcceptableResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Acceptable    bool                   `protobuf:"varint,1,opt,name=acceptable,proto3" json:"acceptable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckFileFormatAcceptableResponse) Reset() {
	*x = CheckFileFormatAcceptableResponse{}
	mi := &file_is_file_acceptable_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckFileFormatAcceptableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckFileFormatAcceptableResponse) ProtoMessage() {}

func (x *CheckFileFormatAcceptableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_is_file_acceptable_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckFileFormatAcceptableResponse.ProtoReflect.Descriptor instead.
func (*CheckFileFormatAcceptableResponse) Descriptor() ([]byte, []int) {
	return file_is_file_acceptable_proto_rawDescGZIP(), []int{1}
}

func (x *CheckFileFormatAcceptableResponse) GetAcceptable() bool {
	if x != nil {
		return x.Acceptable
	}
	return false
}

var File_is_file_acceptable_proto protoreflect.FileDescriptor

const file_is_file_acceptable_proto_rawDesc = "" +
	"\n" +
	"\x18is_file_acceptable.proto\x12\x02pb\"Z\n" +
	" CheckFileFormatAcceptableRequest\x12\x1c\n" +
	"\textension\x18\x01 \x01(\tR\textension\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\"C\n" +
	"!CheckFileFormatAcceptableResponse\x12\x1e\n" +
	"\n" +
	"acceptable\x18\x01 \x01(\bR\n" +
	"acceptableB=Z;github.com/2landhnal/digital-preservation-shared-payload/pbb\x06proto3"

var (
	file_is_file_acceptable_proto_rawDescOnce sync.Once
	file_is_file_acceptable_proto_rawDescData []byte
)

func file_is_file_acceptable_proto_rawDescGZIP() []byte {
	file_is_file_acceptable_proto_rawDescOnce.Do(func() {
		file_is_file_acceptable_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_is_file_acceptable_proto_rawDesc), len(file_is_file_acceptable_proto_rawDesc)))
	})
	return file_is_file_acceptable_proto_rawDescData
}

var file_is_file_acceptable_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_is_file_acceptable_proto_goTypes = []any{
	(*CheckFileFormatAcceptableRequest)(nil),  // 0: pb.CheckFileFormatAcceptableRequest
	(*CheckFileFormatAcceptableResponse)(nil), // 1: pb.CheckFileFormatAcceptableResponse
}
var file_is_file_acceptable_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_is_file_acceptable_proto_init() }
func file_is_file_acceptable_proto_init() {
	if File_is_file_acceptable_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_is_file_acceptable_proto_rawDesc), len(file_is_file_acceptable_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_is_file_acceptable_proto_goTypes,
		DependencyIndexes: file_is_file_acceptable_proto_depIdxs,
		MessageInfos:      file_is_file_acceptable_proto_msgTypes,
	}.Build()
	File_is_file_acceptable_proto = out.File
	file_is_file_acceptable_proto_goTypes = nil
	file_is_file_acceptable_proto_depIdxs = nil
}
